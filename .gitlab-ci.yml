stages:
  - dev-build
  - dev-deploy
  - staging-build
  - staging-deploy
  - prod-build
  - prod-deploy

.aws_cli_init:
  before_script:
    - |
      yum install -y jq

dev-build:
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  image: node:14
  stage: dev-build
  script:
    - yarn
    - yarn build:dev
  artifacts:
    paths:
      - out-dev

dev-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: dev-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account

      # Deploy to S3 and invalidate Cloudfront Distributions
      ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-nonprod
    region: us-east-1
    bucket_name: myria-dev.nonprod-myria.com
    artifacts_folder: out-dev
    cloudfront_id: E16CH11X42OZD4
  dependencies:
    - dev-build

staging-build:
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
  image: node:14
  stage: staging-build
  script:
    - yarn
    - yarn build:staging
  artifacts:
    paths:
      - out-staging

# Staging CD target 1
staging-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: staging-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account

      # Deploy to S3 and invalidate Cloudfront Distributions
      ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-nonprod
    region: us-east-1
    bucket_name: myria-staging.nonprod-myria.com
    artifacts_folder: out-staging
    cloudfront_id: E13LZBS3DMRA8F
  dependencies:
    - staging-build

# The below is legacy using the previous manually created bucket
# Staging CD target 2
staging-legacy-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: staging-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account

      # Deploy to S3 and invalidate Cloudfront Distributions
      ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-prod
    region: us-east-1
    bucket_name: website-dapp-staging
    artifacts_folder: out-staging
    cloudfront_id: E36R51175D7RC5
  dependencies:
    - staging-build

prod-build:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  image: node:14
  stage: prod-build
  script:
    - yarn
    - yarn build:prod
  artifacts:
    paths:
      - out-prod

# Prod CD target 1
preprod-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: prod-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account

      # Deploy to S3 and invalidate Cloudfront Distributions
      ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-prod
    region: us-east-1
    bucket_name: myria-preprod.myria.com
    artifacts_folder: out-prod
    cloudfront_id: E1SN30T2UKSLIF
  dependencies:
    - prod-build

# Prod CD target 2
prod-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: prod-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account

      # Deploy to S3 and invalidate Cloudfront Distributions
      ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-prod
    region: us-east-1
    bucket_name: myria.com
    artifacts_folder: out-prod
    cloudfront_id: E2K9Z1GWCIDOGE
  dependencies:
    - prod-build
  when: manual

# The below is legacy using the previous manually created bucket
prod-legacy-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: prod-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account

      # Deploy to S3 and invalidate Cloudfront Distributions
      ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-prod
    region: us-east-1
    bucket_name: website-dapp
    artifacts_folder: out-prod
    cloudfront_id: EOL371HWV4XB1
  dependencies:
    - prod-build
  when: manual

# Staging test to delete
staging-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "fix-staging-assumerole"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  stage: staging-deploy
  extends:
    - .aws_cli_init
  script:
    - |
      ./scripts/assume_deployer_role.sh $account
      
      aws s3 ls
      # Deploy to S3 and invalidate Cloudfront Distributions
      # ./scripts/deploy_to_s3.sh $bucket_name $artifacts_folder $cloudfront_id
  variables:
    account: myria-net-nonprod
    region: us-east-1
    bucket_name: myria-staging.nonprod-myria.com
    artifacts_folder: out-staging
    cloudfront_id: E13LZBS3DMRA8F
